I want this project to be separated into modular components.
Maybe something like this structure:

1. index.js - the entry point, will instantiate app.js
2. controller.js - the main controller, bringing all components together
3. template.html
4. styles.css
5. /components/search.js - handles the search input
6. /components/menu.js - handles the hamburger menu logic
7. /components/api.js - fetches data from the weather API
8. /components/weather-cards/temperature.js - DOM manipulation to display weather data in the UI.

Note: each weather data type (temperature, humidity, etc.) gets its own weatherCard component.

Example request URL:
https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/montreal%20quebec/next7days?unitGroup=metric&key=39U4T4JP9KSAU8CAEP5CYS87V&contentType=json


Processing weather data:
data.days is an array containing the day objects requested. 
For today, the length is 1 and the object with all the weather data for the day is contained within array[0].
- Maybe I could run a forEach() loop onto the data.days array, to extract the data for the selected days.

Dropdown menu ideas:
1. Clicking away from the open menu should close it. Done.

How to use settings when building requests:
1. getSettings() returns an object. 
2. Maybe I can look through it and find the properties with value=true.
3. I can then inject those property names to the request string in fetchWeather.

What data I want to display:
city
conditions
datetime
temp
feelsLike
humidity
precip
precipProb
precipType
sunrise
sunset

Settings need work:
1. getSettings() needs to return the two settings that are true, as an array of strings. e.g. ['metric', 'today']
2. How about getSettings().checkedSettings which would output that array, then I convert it to a string settingsString = "'metric','today'"
3. I can pass that string as an argument when calling displayAllCards(data, settingsString)
4. No, I will make the array of strings, then use the spread syntax to pass the members as arguments e.g. ...array

Converting values from metric to us:
1. I can convert the values myself, or make an API request and modify only the units like mm for rain, or degF instead of degC.
2. Relying on the API to convert the values seems much easier, so I'll go with that, to save time.
3. So, toggling the units setting must modify a few values in the DOM.
4. I'll make a full list here, using data-id:
temp (degC)
feelsLike (degC)
precip (mm)

I have the app fully functional now. I could embellish it a little, with some dynamically imported icons.

Users have requested extra metrics:
1. high/low temp. DONE.
2. moonrise time and location. IMPOSSIBLE, data unavailable.
3. wind direction and speed. DONE.
4. hourly data at the click of a button. - I wrapped the fetchWeather function in a class, 
so that I can store the weather data in there and make it accessible to modules without needing to fetch again.
This is great for the hourly module, since the data is already fetched before the button is clicked.
Then the hourly button can simply look through the already fetched weather data and generate cards from it.

